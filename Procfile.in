# Use goreman to run `go get github.com/mattn/goreman`
# 注意有多少个node就要对应多少个port，所有ports都要在每一个node启动时提供。这样他们才知道peers
# 的完整情况。Goreman 中每一个port模仿的是一个独立的进程。所以Raft模拟的不是thread computing，而是
# parallel computing，也就是线进程间通信。Raft也就属于并行计算，因为多个节点并行执行Raft协议的不同部分，
# 并且通过通信达成一致。
node1: ./raft-kv/raft-kv --id 1 --cluster=127.0.0.1:12379,127.0.0.1:22379,127.0.0.1:32379,127.0.0.1:42379 --port 63791
node2: ./raft-kv/raft-kv --id 2 --cluster=127.0.0.1:12379,127.0.0.1:22379,127.0.0.1:32379,127.0.0.1:42379 --port 63792
node3: ./raft-kv/raft-kv --id 3 --cluster=127.0.0.1:12379,127.0.0.1:22379,127.0.0.1:32379,127.0.0.1:42379 --port 63793
# Lu: add a 4th node
# 在Raft一致性算法的实现中，--cluster 参数通常用于指定集群中的所有节点地址，以便每个节点都知道其他节点的存在。在你的例子中，--cluster 参数后面的地址列表包含了集群中的所有节点。
# 如果你的集群有多个节点，那么你需要在--cluster参数中列出所有这些节点的地址。
# 具体来说，--cluster 后面列出的地址格式通常是 IP 地址和端口号的组合，用逗号分隔。每个节点的启动命令都应该包含集群中所有节点的地址列表。这样，每个节点在启动时就知道如何与其他节点通信。
node4: ./raft-kv/raft-kv --id 4 --cluster=127.0.0.1:12379,127.0.0.1:22379,127.0.0.1:32379,127.0.0.1:42379 --port 63794